// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/data/sylog/interface.go

// Package mock_sylog is a generated GoMock package.
package mock_sylog

import (
	response "github.com/go-liam/util/response"
	gomock "github.com/golang/mock/gomock"
	sylog "grape/internal/pkg/data/sylog"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockService) Create(item *sylog.Model) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), item)
}

// FindMulti mocks base method
func (m *MockService) FindMulti(p *response.Pagination, s *response.ListParameter) ([]*sylog.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMulti", p, s)
	ret0, _ := ret[0].([]*sylog.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMulti indicates an expected call of FindMulti
func (mr *MockServiceMockRecorder) FindMulti(p, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMulti", reflect.TypeOf((*MockService)(nil).FindMulti), p, s)
}

// Delete mocks base method
func (m *MockService) Delete(beforeTime int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", beforeTime)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(beforeTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), beforeTime)
}

// WriteLog mocks base method
func (m *MockService) WriteLog(logID int64, msg string, level int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLog", logID, msg, level)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLog indicates an expected call of WriteLog
func (mr *MockServiceMockRecorder) WriteLog(logID, msg, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLog", reflect.TypeOf((*MockService)(nil).WriteLog), logID, msg, level)
}

// SetConfig mocks base method
func (m *MockService) SetConfig(item *sylog.ConfigModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig
func (mr *MockServiceMockRecorder) SetConfig(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockService)(nil).SetConfig), item)
}
