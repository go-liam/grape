// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svlog.proto

package svlog

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthReq struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=clientName,proto3" json:"clientName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthReq) Reset()         { *m = HealthReq{} }
func (m *HealthReq) String() string { return proto.CompactTextString(m) }
func (*HealthReq) ProtoMessage()    {}
func (*HealthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_097566300d6d266c, []int{0}
}

func (m *HealthReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthReq.Unmarshal(m, b)
}
func (m *HealthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthReq.Marshal(b, m, deterministic)
}
func (m *HealthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthReq.Merge(m, src)
}
func (m *HealthReq) XXX_Size() int {
	return xxx_messageInfo_HealthReq.Size(m)
}
func (m *HealthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthReq.DiscardUnknown(m)
}

var xxx_messageInfo_HealthReq proto.InternalMessageInfo

func (m *HealthReq) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type HealthResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ServerName           string   `protobuf:"bytes,2,opt,name=serverName,proto3" json:"serverName,omitempty"`
	Version              int64    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthResp) Reset()         { *m = HealthResp{} }
func (m *HealthResp) String() string { return proto.CompactTextString(m) }
func (*HealthResp) ProtoMessage()    {}
func (*HealthResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_097566300d6d266c, []int{1}
}

func (m *HealthResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResp.Unmarshal(m, b)
}
func (m *HealthResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResp.Marshal(b, m, deterministic)
}
func (m *HealthResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResp.Merge(m, src)
}
func (m *HealthResp) XXX_Size() int {
	return xxx_messageInfo_HealthResp.Size(m)
}
func (m *HealthResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResp.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResp proto.InternalMessageInfo

func (m *HealthResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HealthResp) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HealthResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HealthResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WriteLogReq struct {
	Level                int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	LogID                int64    `protobuf:"varint,2,opt,name=logID,proto3" json:"logID,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteLogReq) Reset()         { *m = WriteLogReq{} }
func (m *WriteLogReq) String() string { return proto.CompactTextString(m) }
func (*WriteLogReq) ProtoMessage()    {}
func (*WriteLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_097566300d6d266c, []int{2}
}

func (m *WriteLogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteLogReq.Unmarshal(m, b)
}
func (m *WriteLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteLogReq.Marshal(b, m, deterministic)
}
func (m *WriteLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteLogReq.Merge(m, src)
}
func (m *WriteLogReq) XXX_Size() int {
	return xxx_messageInfo_WriteLogReq.Size(m)
}
func (m *WriteLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_WriteLogReq proto.InternalMessageInfo

func (m *WriteLogReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *WriteLogReq) GetLogID() int64 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *WriteLogReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type WriteLogResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteLogResp) Reset()         { *m = WriteLogResp{} }
func (m *WriteLogResp) String() string { return proto.CompactTextString(m) }
func (*WriteLogResp) ProtoMessage()    {}
func (*WriteLogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_097566300d6d266c, []int{3}
}

func (m *WriteLogResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteLogResp.Unmarshal(m, b)
}
func (m *WriteLogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteLogResp.Marshal(b, m, deterministic)
}
func (m *WriteLogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteLogResp.Merge(m, src)
}
func (m *WriteLogResp) XXX_Size() int {
	return xxx_messageInfo_WriteLogResp.Size(m)
}
func (m *WriteLogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteLogResp.DiscardUnknown(m)
}

var xxx_messageInfo_WriteLogResp proto.InternalMessageInfo

func (m *WriteLogResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WriteLogResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HealthReq)(nil), "svlog.HealthReq")
	proto.RegisterType((*HealthResp)(nil), "svlog.HealthResp")
	proto.RegisterType((*WriteLogReq)(nil), "svlog.WriteLogReq")
	proto.RegisterType((*WriteLogResp)(nil), "svlog.WriteLogResp")
}

func init() { proto.RegisterFile("svlog.proto", fileDescriptor_097566300d6d266c) }

var fileDescriptor_097566300d6d266c = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x55, 0x9a, 0xa6, 0x90, 0x6b, 0x87, 0x72, 0x30, 0x44, 0x1d, 0x50, 0x95, 0xa9, 0x12, 0xa2,
	0x03, 0x5d, 0x19, 0x19, 0x40, 0x54, 0x0c, 0xee, 0xc0, 0x1c, 0xc2, 0xc9, 0x44, 0x72, 0xea, 0xe0,
	0xb3, 0xfc, 0xfd, 0x28, 0x76, 0x4d, 0x02, 0x88, 0xed, 0xde, 0xbb, 0xf3, 0x7b, 0x77, 0xcf, 0x30,
	0x67, 0xa7, 0xb4, 0xdc, 0x76, 0x46, 0x5b, 0x8d, 0x99, 0x07, 0xe5, 0x0d, 0xe4, 0x8f, 0x54, 0x29,
	0xfb, 0x21, 0xe8, 0x13, 0xaf, 0x01, 0x6a, 0xd5, 0xd0, 0xd1, 0xbe, 0x54, 0x2d, 0x15, 0xc9, 0x3a,
	0xd9, 0xe4, 0x62, 0xc4, 0x94, 0x16, 0x20, 0x0e, 0x73, 0x87, 0x08, 0xd3, 0x5a, 0xbf, 0x87, 0xb9,
	0x4c, 0xf8, 0xba, 0x57, 0x60, 0x32, 0x8e, 0x8c, 0x57, 0x98, 0x04, 0x85, 0x81, 0xc1, 0x02, 0xce,
	0x1c, 0x19, 0x6e, 0xf4, 0xb1, 0x48, 0xd7, 0xc9, 0x26, 0x15, 0x11, 0xf6, 0x9d, 0x96, 0x98, 0x2b,
	0x49, 0xc5, 0xd4, 0x3f, 0x8b, 0xb0, 0x7c, 0x86, 0xf9, 0xab, 0x69, 0x2c, 0xed, 0xb5, 0xec, 0x97,
	0xbc, 0x82, 0x4c, 0x91, 0x23, 0x75, 0xf2, 0x0d, 0xc0, 0xb3, 0x5a, 0x3e, 0x3d, 0x78, 0xcf, 0x54,
	0x04, 0x80, 0x4b, 0x48, 0x5b, 0x96, 0xde, 0x2a, 0x17, 0x7d, 0x59, 0xde, 0xc3, 0x62, 0x10, 0xfb,
	0xe7, 0x88, 0xd1, 0x2a, 0x93, 0x1f, 0xab, 0xdc, 0x19, 0x58, 0x1c, 0xdc, 0x5e, 0xcb, 0x03, 0x19,
	0xd7, 0xd4, 0x84, 0xb7, 0x30, 0x0b, 0x81, 0xe0, 0x72, 0x1b, 0xc2, 0xfd, 0x0e, 0x73, 0x75, 0xf1,
	0x8b, 0xe1, 0x0e, 0x77, 0x70, 0x1e, 0xcd, 0x11, 0x4f, 0xed, 0xd1, 0x69, 0xab, 0xcb, 0x3f, 0x1c,
	0x77, 0x6f, 0x33, 0xff, 0x5f, 0xbb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x46, 0xe2, 0xf5,
	0xbe, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SvLogServiceClient is the client API for SvLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SvLogServiceClient interface {
	Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthResp, error)
	WriteLog(ctx context.Context, in *WriteLogReq, opts ...grpc.CallOption) (*WriteLogResp, error)
}

type svLogServiceClient struct {
	cc *grpc.ClientConn
}

func NewSvLogServiceClient(cc *grpc.ClientConn) SvLogServiceClient {
	return &svLogServiceClient{cc}
}

func (c *svLogServiceClient) Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthResp, error) {
	out := new(HealthResp)
	err := c.cc.Invoke(ctx, "/svlog.SvLogService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svLogServiceClient) WriteLog(ctx context.Context, in *WriteLogReq, opts ...grpc.CallOption) (*WriteLogResp, error) {
	out := new(WriteLogResp)
	err := c.cc.Invoke(ctx, "/svlog.SvLogService/WriteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SvLogServiceServer is the server API for SvLogService service.
type SvLogServiceServer interface {
	Health(context.Context, *HealthReq) (*HealthResp, error)
	WriteLog(context.Context, *WriteLogReq) (*WriteLogResp, error)
}

// UnimplementedSvLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSvLogServiceServer struct {
}

func (*UnimplementedSvLogServiceServer) Health(ctx context.Context, req *HealthReq) (*HealthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedSvLogServiceServer) WriteLog(ctx context.Context, req *WriteLogReq) (*WriteLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLog not implemented")
}

func RegisterSvLogServiceServer(s *grpc.Server, srv SvLogServiceServer) {
	s.RegisterService(&_SvLogService_serviceDesc, srv)
}

func _SvLogService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvLogServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svlog.SvLogService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvLogServiceServer).Health(ctx, req.(*HealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvLogService_WriteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvLogServiceServer).WriteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svlog.SvLogService/WriteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvLogServiceServer).WriteLog(ctx, req.(*WriteLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SvLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svlog.SvLogService",
	HandlerType: (*SvLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _SvLogService_Health_Handler,
		},
		{
			MethodName: "WriteLog",
			Handler:    _SvLogService_WriteLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svlog.proto",
}
